/* The following code was generated by JFlex 1.4.3 on 16/04/16 04:15 AM */

package BackEnd.Analizadores;

import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/04/16 04:15 AM from the specification file
 * <tt>analizadorjflex.jflex</tt>
 */
public class Lexico_reply implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\0\2\41\22\0\1\41\1\0\1\3\1\6"+
    "\1\10\5\0\1\7\2\0\1\11\1\2\1\4\12\1\3\0\1\36"+
    "\10\0\1\40\15\0\1\37\1\17\13\0\1\22\1\34\1\26\1\25"+
    "\1\13\1\33\1\27\1\0\1\23\2\0\1\15\1\32\1\31\1\24"+
    "\1\14\1\0\1\12\1\20\1\30\1\21\3\0\1\16\167\0\1\35"+
    "\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\17\1"+
    "\1\5\2\1\1\2\1\0\1\6\2\0\1\7\11\0"+
    "\1\10\16\0\1\3\13\0\1\11\44\0\1\12\3\0"+
    "\1\13\1\14\1\15\1\0\1\16\4\0\1\17\7\0"+
    "\1\20\5\0\1\21\10\0\1\22\4\0\1\23\1\0"+
    "\1\24\1\25\1\26\6\0\1\27\4\0\1\30\2\0"+
    "\1\31\1\32\1\0\1\33\1\34\1\35\2\0\1\36"+
    "\1\37\3\0\1\40\1\41\2\0\1\42\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\42"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\42"+
    "\0\u02ec\0\u030e\0\u0330\0\146\0\42\0\u0352\0\u0374\0\42"+
    "\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484"+
    "\0\u04a6\0\42\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572"+
    "\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682"+
    "\0\42\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770"+
    "\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\42\0\u081a\0\u083c\0\u085e"+
    "\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e"+
    "\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e"+
    "\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e"+
    "\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e"+
    "\0\u0cc0\0\42\0\u0ce2\0\u0d04\0\u0d26\0\42\0\42\0\42"+
    "\0\u0d48\0\42\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\42\0\u0df2"+
    "\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\42\0\u0ee0"+
    "\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\42\0\u0f8a\0\u0fac\0\u0fce"+
    "\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\42\0\u109a\0\u10bc"+
    "\0\u10de\0\u1100\0\42\0\u1122\0\42\0\42\0\42\0\u1144"+
    "\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\42\0\u1210\0\u1232"+
    "\0\u1254\0\u1276\0\42\0\u1298\0\u12ba\0\42\0\42\0\u12dc"+
    "\0\42\0\42\0\42\0\u12fe\0\u1320\0\42\0\42\0\u1342"+
    "\0\u1364\0\u1386\0\42\0\42\0\u13a8\0\u13ca\0\42\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\2\1\20\1\21\1\2\1\22\1\23\1\2"+
    "\1\24\1\25\1\26\1\27\2\2\1\30\1\31\1\32"+
    "\1\6\43\0\1\3\1\33\37\0\3\34\1\35\36\34"+
    "\4\0\1\36\42\0\1\6\33\0\1\6\7\0\1\37"+
    "\42\0\1\40\44\0\1\41\40\0\1\42\2\0\1\43"+
    "\36\0\1\44\11\0\1\45\40\0\1\46\36\0\1\47"+
    "\42\0\1\50\46\0\1\51\40\0\1\52\4\0\1\53"+
    "\22\0\1\54\7\0\1\55\40\0\1\56\1\0\1\57"+
    "\30\0\1\60\6\0\1\61\1\62\42\0\1\63\37\0"+
    "\1\64\1\0\1\65\40\0\1\66\30\0\1\67\51\0"+
    "\1\70\20\0\1\33\40\0\5\36\1\71\34\36\6\37"+
    "\1\0\1\72\32\37\14\0\1\73\12\0\1\74\24\0"+
    "\1\75\52\0\1\76\42\0\1\77\35\0\1\100\41\0"+
    "\1\101\42\0\1\102\46\0\1\103\41\0\1\104\42\0"+
    "\1\105\32\0\1\106\33\0\1\107\60\0\1\110\25\0"+
    "\1\111\7\0\1\112\31\0\1\113\56\0\1\114\22\0"+
    "\1\115\1\116\57\0\1\117\21\0\1\120\54\0\1\121"+
    "\31\0\1\122\45\0\1\123\35\0\1\124\5\0\1\125"+
    "\16\0\6\37\1\71\1\72\32\37\15\0\1\126\47\0"+
    "\1\127\42\0\1\130\47\0\1\131\23\0\1\132\10\0"+
    "\1\133\37\0\1\134\46\0\1\135\33\0\1\136\40\0"+
    "\1\137\33\0\1\140\54\0\1\141\26\0\1\142\56\0"+
    "\1\143\32\0\1\144\2\0\1\145\40\0\1\146\31\0"+
    "\1\147\50\0\1\150\50\0\1\151\34\0\1\152\51\0"+
    "\1\153\33\0\1\154\36\0\1\155\40\0\1\156\32\0"+
    "\1\157\46\0\1\123\36\0\1\157\42\0\1\160\43\0"+
    "\1\161\33\0\1\162\52\0\1\163\41\0\1\164\37\0"+
    "\1\165\46\0\1\166\35\0\1\167\31\0\1\170\41\0"+
    "\1\171\47\0\1\172\33\0\1\173\55\0\1\174\36\0"+
    "\1\175\50\0\1\176\21\0\1\177\56\0\1\200\45\0"+
    "\1\201\43\0\1\202\31\0\1\203\26\0\1\204\51\0"+
    "\1\205\52\0\1\206\36\0\1\207\42\0\1\210\23\0"+
    "\1\211\54\0\1\212\36\0\1\213\41\0\1\214\36\0"+
    "\1\215\41\0\1\216\44\0\1\217\44\0\1\220\40\0"+
    "\1\221\45\0\1\222\34\0\1\223\41\0\1\224\41\0"+
    "\1\225\37\0\1\226\32\0\1\227\51\0\1\230\30\0"+
    "\1\231\51\0\1\232\47\0\1\233\41\0\1\234\35\0"+
    "\1\235\41\0\1\236\37\0\1\237\33\0\1\240\50\0"+
    "\1\241\40\0\1\242\41\0\1\243\50\0\1\244\36\0"+
    "\1\245\37\0\1\246\27\0\1\247\51\0\1\250\43\0"+
    "\1\251\46\0\1\252\25\0\1\253\52\0\1\254\37\0"+
    "\1\255\42\0\1\256\40\0\1\257\37\0\1\260\31\0"+
    "\1\261\52\0\1\262\47\0\1\263\22\0\1\264\52\0"+
    "\1\265\42\0\1\266\41\0\1\267\46\0\1\270\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\17\1\1\11\3\1\1\0"+
    "\1\11\2\0\1\11\11\0\1\11\16\0\1\11\13\0"+
    "\1\11\44\0\1\11\3\0\3\11\1\0\1\11\4\0"+
    "\1\11\7\0\1\11\5\0\1\11\10\0\1\11\4\0"+
    "\1\11\1\0\3\11\6\0\1\11\4\0\1\11\2\0"+
    "\2\11\1\0\3\11\2\0\2\11\3\0\2\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico_reply(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico_reply(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 102) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(Simbolo.Propietario, yycolumn,yyline,yytext());
          }
        case 36: break;
        case 16: 
          { return new Symbol(Simbolo.Color, yycolumn,yyline,yytext());
          }
        case 37: break;
        case 5: 
          { return new Symbol(Simbolo.Igual, yycolumn,yyline,yytext());
          }
        case 38: break;
        case 11: 
          { return new Symbol(Simbolo.FILA,yycolumn,yyline,yytext());
          }
        case 39: break;
        case 10: 
          { return new Symbol(Simbolo.TIPO,yycolumn,yyline,yytext());
          }
        case 40: break;
        case 35: 
          { return new Symbol(Simbolo.DESC,yycolumn,yyline,yytext());
          }
        case 41: break;
        case 25: 
          { return new Symbol(Simbolo.Registro, yycolumn,yyline,yytext());
          }
        case 42: break;
        case 8: 
          { return new Symbol(Simbolo.Id, yycolumn,yyline, yytext());
          }
        case 43: break;
        case 30: 
          { return new Symbol(Simbolo.Cantidad, yycolumn,yyline,yytext());
          }
        case 44: break;
        case 14: 
          { return new Symbol(Simbolo.ERR,yycolumn,yyline,yytext());
          }
        case 45: break;
        case 24: 
          { return new Symbol(Simbolo.COLUMNA,yycolumn,yyline,yytext());
          }
        case 46: break;
        case 7: 
          { return new Symbol(Simbolo.DF, yycolumn,yyline,yytext());
          }
        case 47: break;
        case 20: 
          { return new Symbol(Simbolo.Tamano, yycolumn,yyline,yytext());
          }
        case 48: break;
        case 17: 
          { return new Symbol(Simbolo.Marca, yycolumn,yyline,yytext());
          }
        case 49: break;
        case 29: 
          { return new Symbol(Simbolo.Sucursal, yycolumn,yyline,yytext());
          }
        case 50: break;
        case 12: 
          { return new Symbol(Simbolo.bool, yycolumn,yyline,yytext());
          }
        case 51: break;
        case 13: 
          { return new Symbol(Simbolo.Reply, yycolumn,yyline,yytext());
          }
        case 52: break;
        case 15: 
          { return new Symbol(Simbolo.Lista, yycolumn,yyline,yytext());
          }
        case 53: break;
        case 1: 
          { System.out.println("cagada con: " + yytext() + " " + yyline + " " + yycolumn);
    for(int i=0;i<yytext().length();i++){
        System.out.println(yytext().charAt(i) + " = " + yytext().codePointAt(i));
    }
          }
        case 54: break;
        case 19: 
          { return new Symbol(Simbolo.Codigo, yycolumn,yyline,yytext());
          }
        case 55: break;
        case 4: 
          { return new Symbol(Simbolo.DI, yycolumn,yyline,yytext());
          }
        case 56: break;
        case 21: 
          { return new Symbol(Simbolo.Tienda, yycolumn,yyline,yytext());
          }
        case 57: break;
        case 9: 
          { return new Symbol(Simbolo.imagen, yycolumn,yyline,yytext());
          }
        case 58: break;
        case 31: 
          { return new Symbol(Simbolo.Telefono, yycolumn,yyline,yytext());
          }
        case 59: break;
        case 33: 
          { return new Symbol(Simbolo.Modificar, yycolumn,yyline,yytext());
          }
        case 60: break;
        case 22: 
          { return new Symbol(Simbolo.Nombre, yycolumn,yyline,yytext());
          }
        case 61: break;
        case 18: 
          { return new Symbol(Simbolo.Access, yycolumn,yyline,yytext());
          }
        case 62: break;
        case 26: 
          { return new Symbol(Simbolo.Eliminacion, yycolumn,yyline,yytext());
          }
        case 63: break;
        case 27: 
          { return new Symbol(Simbolo.Producto, yycolumn,yyline,yytext());
          }
        case 64: break;
        case 23: 
          { return new Symbol(Simbolo.usuario, yycolumn,yyline,yytext());
          }
        case 65: break;
        case 28: 
          { return new Symbol(Simbolo.PO,yycolumn,yyline,yytext());
          }
        case 66: break;
        case 6: 
          { String str=yytext();
                     		str = str.substring(1,str.length()-1);
 				System.out.println(str);
				return new Symbol(Simbolo.cadena, yycolumn,yyline,str);
          }
        case 67: break;
        case 2: 
          { return new Symbol(Simbolo.numero, yycolumn,yyline,yytext());
          }
        case 68: break;
        case 32: 
          { return new Symbol(Simbolo.Direccion, yycolumn,yyline,yytext());
          }
        case 69: break;
        case 3: 
          { 
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
