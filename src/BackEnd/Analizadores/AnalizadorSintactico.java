
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 11 18:06:40 CST 2016
//----------------------------------------------------

package BackEnd.Analizadores;

import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.Log_in;
import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.Catalogo_Tiendas;
import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.usuario;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import BackEnd.DOA.Objetos.Error;
import BackEnd.DOA.Objetos.Producto;
import BackEnd.DOA.Objetos.Tienda;
import BackEnd.DOA.Objetos.Acess;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 11 18:06:40 CST 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\003\000\002\031\011\000\002\031\011\000\002" +
    "\023\004\000\002\023\003\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\025\004\000\002\025\003" +
    "\000\002\026\011\000\002\026\011\000\002\017\011\000" +
    "\002\006\011\000\002\020\004\000\002\020\003\000\002" +
    "\011\004\000\002\011\003\000\002\021\011\000\002\021" +
    "\011\000\002\021\011\000\002\021\011\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\017" +
    "\000\002\015\017\000\002\016\017\000\002\007\014\000" +
    "\002\010\014\000\002\005\014\000\002\005\004\000\002" +
    "\027\004\000\002\027\003\000\002\030\011\000\002\030" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\007\005\001\002\000\004\002\u010c\001" +
    "\002\000\004\012\006\001\002\000\004\007\007\001\002" +
    "\000\004\007\012\001\002\000\004\007\ufff8\001\002\000" +
    "\004\007\u0108\001\002\000\014\017\020\020\017\021\014" +
    "\022\016\023\015\001\002\000\004\007\ufffe\001\002\000" +
    "\004\007\333\001\002\000\004\007\167\001\002\000\004" +
    "\007\116\001\002\000\004\007\053\001\002\000\004\007" +
    "\021\001\002\000\004\007\024\001\002\000\004\007\050" +
    "\001\002\000\004\007\uffd7\001\002\000\006\015\026\016" +
    "\027\001\002\000\004\007\uffd6\001\002\000\004\031\040" +
    "\001\002\000\004\031\030\001\002\000\004\011\031\001" +
    "\002\000\004\004\032\001\002\000\004\007\033\001\002" +
    "\000\004\006\034\001\002\000\004\007\035\001\002\000" +
    "\004\016\036\001\002\000\004\010\037\001\002\000\004" +
    "\007\uffd1\001\002\000\004\011\041\001\002\000\004\004" +
    "\042\001\002\000\004\007\043\001\002\000\004\006\044" +
    "\001\002\000\004\007\045\001\002\000\004\015\046\001" +
    "\002\000\004\010\047\001\002\000\004\007\uffd2\001\002" +
    "\000\004\017\051\001\002\000\004\010\052\001\002\000" +
    "\004\007\ufffc\001\002\000\006\003\055\007\060\001\002" +
    "\000\004\007\113\001\002\000\004\020\111\001\002\000" +
    "\004\007\106\001\002\000\004\007\uffcd\001\002\000\010" +
    "\013\063\014\062\031\061\001\002\000\004\007\101\001" +
    "\002\000\004\031\071\001\002\000\004\007\064\001\002" +
    "\000\004\006\065\001\002\000\004\007\066\001\002\000" +
    "\004\013\067\001\002\000\004\010\070\001\002\000\004" +
    "\007\uffcb\001\002\000\004\011\072\001\002\000\004\004" +
    "\073\001\002\000\004\007\074\001\002\000\004\006\075" +
    "\001\002\000\004\007\076\001\002\000\004\014\077\001" +
    "\002\000\004\010\100\001\002\000\004\007\uffd0\001\002" +
    "\000\004\004\102\001\002\000\004\007\103\001\002\000" +
    "\004\031\104\001\002\000\004\010\105\001\002\000\004" +
    "\007\uffcc\001\002\000\004\020\107\001\002\000\004\010" +
    "\110\001\002\000\004\007\ufffb\001\002\000\004\007\uffcf" +
    "\001\002\000\004\007\uffce\001\002\000\010\013\063\020" +
    "\114\031\061\001\002\000\004\010\115\001\002\000\004" +
    "\007\ufffd\001\002\000\004\007\121\001\002\000\004\007" +
    "\164\001\002\000\004\007\ufff4\001\002\000\010\024\124" +
    "\025\122\030\123\001\002\000\004\007\137\001\002\000" +
    "\004\007\132\001\002\000\004\007\125\001\002\000\004" +
    "\005\126\001\002\000\004\007\127\001\002\000\004\024" +
    "\130\001\002\000\004\010\131\001\002\000\004\007\ufff3" +
    "\001\002\000\004\005\133\001\002\000\004\007\134\001" +
    "\002\000\004\030\135\001\002\000\004\010\136\001\002" +
    "\000\004\007\ufff1\001\002\000\004\007\142\001\002\000" +
    "\004\007\160\001\002\000\004\007\uffef\001\002\000\006" +
    "\026\143\027\144\001\002\000\004\007\152\001\002\000" +
    "\004\007\145\001\002\000\004\004\146\001\002\000\004" +
    "\007\147\001\002\000\004\027\150\001\002\000\004\010" +
    "\151\001\002\000\004\007\uffed\001\002\000\004\004\153" +
    "\001\002\000\004\007\154\001\002\000\004\026\155\001" +
    "\002\000\004\010\156\001\002\000\004\007\uffee\001\002" +
    "\000\004\007\ufff0\001\002\000\010\025\161\026\143\027" +
    "\144\001\002\000\004\010\162\001\002\000\004\007\ufff2" +
    "\001\002\000\004\007\ufff5\001\002\000\012\022\165\024" +
    "\124\025\122\030\123\001\002\000\004\010\166\001\002" +
    "\000\004\007\ufff9\001\002\000\004\007\172\001\002\000" +
    "\004\007\330\001\002\000\004\007\325\001\002\000\006" +
    "\017\174\021\173\001\002\000\004\007\243\001\002\000" +
    "\004\007\175\001\002\000\004\007\200\001\002\000\004" +
    "\007\240\001\002\000\004\007\uffe7\001\002\000\014\032" +
    "\203\033\205\034\202\035\204\036\201\001\002\000\004" +
    "\007\232\001\002\000\004\007\225\001\002\000\004\007" +
    "\220\001\002\000\004\007\213\001\002\000\004\007\206" +
    "\001\002\000\004\005\207\001\002\000\004\007\210\001" +
    "\002\000\004\033\211\001\002\000\004\010\212\001\002" +
    "\000\004\007\uffdd\001\002\000\004\004\214\001\002\000" +
    "\004\007\215\001\002\000\004\035\216\001\002\000\004" +
    "\010\217\001\002\000\004\007\uffdf\001\002\000\004\005" +
    "\221\001\002\000\004\007\222\001\002\000\004\032\223" +
    "\001\002\000\004\010\224\001\002\000\004\007\uffdc\001" +
    "\002\000\004\004\226\001\002\000\004\007\227\001\002" +
    "\000\004\034\230\001\002\000\004\010\231\001\002\000" +
    "\004\007\uffdb\001\002\000\004\004\233\001\002\000\004" +
    "\007\234\001\002\000\004\036\235\001\002\000\004\010" +
    "\236\001\002\000\004\007\uffde\001\002\000\004\007\uffe8" +
    "\001\002\000\016\017\241\032\203\033\205\034\202\035" +
    "\204\036\201\001\002\000\004\010\242\001\002\000\004" +
    "\007\uffeb\001\002\000\004\007\245\001\002\000\004\007" +
    "\uffe9\001\002\000\020\033\257\035\256\037\255\040\252" +
    "\041\260\042\254\043\251\001\002\000\004\007\250\001" +
    "\002\000\004\007\uffea\001\002\000\022\021\253\033\257" +
    "\035\256\037\255\040\252\041\260\042\254\043\251\001" +
    "\002\000\004\007\320\001\002\000\004\007\313\001\002" +
    "\000\004\010\312\001\002\000\004\007\305\001\002\000" +
    "\004\007\300\001\002\000\004\007\273\001\002\000\004" +
    "\007\266\001\002\000\004\007\261\001\002\000\004\005" +
    "\262\001\002\000\004\007\263\001\002\000\004\041\264" +
    "\001\002\000\004\010\265\001\002\000\004\007\uffe2\001" +
    "\002\000\004\005\267\001\002\000\004\007\270\001\002" +
    "\000\004\033\271\001\002\000\004\010\272\001\002\000" +
    "\004\007\uffe5\001\002\000\004\004\274\001\002\000\004" +
    "\007\275\001\002\000\004\035\276\001\002\000\004\010" +
    "\277\001\002\000\004\007\uffe6\001\002\000\004\004\301" +
    "\001\002\000\004\007\302\001\002\000\004\037\303\001" +
    "\002\000\004\010\304\001\002\000\004\007\uffe4\001\002" +
    "\000\004\004\306\001\002\000\004\007\307\001\002\000" +
    "\004\042\310\001\002\000\004\010\311\001\002\000\004" +
    "\007\uffe1\001\002\000\004\007\uffec\001\002\000\004\005" +
    "\314\001\002\000\004\007\315\001\002\000\004\040\316" +
    "\001\002\000\004\010\317\001\002\000\004\007\uffe3\001" +
    "\002\000\004\004\321\001\002\000\004\007\322\001\002" +
    "\000\004\043\323\001\002\000\004\010\324\001\002\000" +
    "\004\007\uffe0\001\002\000\004\023\326\001\002\000\004" +
    "\010\327\001\002\000\004\007\ufff7\001\002\000\004\023" +
    "\331\001\002\000\004\010\332\001\002\000\004\007\ufff6" +
    "\001\002\000\004\007\340\001\002\000\004\007\uffda\001" +
    "\002\000\004\007\uffd8\001\002\000\004\007\uffd9\001\002" +
    "\000\004\007\u0105\001\002\000\010\014\342\015\341\016" +
    "\343\001\002\000\004\031\372\001\002\000\004\031\357" +
    "\001\002\000\004\031\344\001\002\000\004\011\345\001" +
    "\002\000\004\004\346\001\002\000\004\043\347\001\002" +
    "\000\004\011\350\001\002\000\004\004\351\001\002\000" +
    "\004\007\352\001\002\000\004\006\353\001\002\000\004" +
    "\007\354\001\002\000\004\016\355\001\002\000\004\010" +
    "\356\001\002\000\004\007\uffd3\001\002\000\004\011\360" +
    "\001\002\000\004\004\361\001\002\000\004\043\362\001" +
    "\002\000\004\011\363\001\002\000\004\004\364\001\002" +
    "\000\004\007\365\001\002\000\004\006\366\001\002\000" +
    "\004\007\367\001\002\000\004\014\370\001\002\000\004" +
    "\010\371\001\002\000\004\007\uffd5\001\002\000\004\011" +
    "\373\001\002\000\004\004\374\001\002\000\004\043\375" +
    "\001\002\000\004\011\376\001\002\000\004\004\377\001" +
    "\002\000\004\007\u0100\001\002\000\004\006\u0101\001\002" +
    "\000\004\007\u0102\001\002\000\004\015\u0103\001\002\000" +
    "\004\010\u0104\001\002\000\004\007\uffd4\001\002\000\004" +
    "\021\u0106\001\002\000\004\010\u0107\001\002\000\004\007" +
    "\ufffa\001\002\000\016\012\u010a\017\020\020\017\021\014" +
    "\022\016\023\015\001\002\000\004\007\uffff\001\002\000" +
    "\004\010\u010b\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\010\004\012" +
    "\031\007\001\001\000\002\001\001\000\006\004\u0108\031" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\024\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\055\027\053\030\056\001\001\000\004\030\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\116\024\117\001\001\000\004" +
    "\024\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\137\026\140\001\001\000\004\026\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\167\017\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\175\012\176\001\001\000\004\012\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\245\021\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\333\015\335\016\334\022\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



		

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATALOGP ::= DI Access DI bool DI Access DF 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		  RESULT = new Acess();
                                                                                            RESULT.setValor(val);
                                                                                            RESULT.concatenar("\t $access$ ");
                                                                                            RESULT.concatenar(val);
                                                                                            RESULT.concatenar(" $access-$\n");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DATALOGP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATALOGP ::= DI Id DI numero DI Id DF 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		  RESULT = new Acess();
                                                                                            RESULT.setId(val);
                                                                                            RESULT.concatenar("\t $id$ ");
                                                                                            RESULT.concatenar(val);
                                                                                            RESULT.concatenar(" $id-$\n");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DATALOGP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOG ::= DATALOGP 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Acess val = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = val; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LOG ::= LOG DATALOGP 
            {
              Acess RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Acess val1 = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Acess val2 = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = new Acess();
    if(val1.getId()!=null){
        RESULT.setId(val1.getId());
        RESULT.setValor(val2.getValor());
        RESULT.concatenar(val1.getreply());
        RESULT.concatenar(val2.getreply());
    }else{
        RESULT.setId(val2.getId());
        RESULT.setValor(val1.getValor());
        RESULT.concatenar(val2.getreply());
        RESULT.concatenar(val1.getreply());
    }
    switch (RESULT.getValor()) {
        case "True":
            usuario.setId(Integer.parseInt(RESULT.getId()));
            Catalogo_Tiendas.get_tiendas();
            Log_in.setVisible(false);
            JOptionPane.showMessageDialog(null,"Bienvenido usuario " + RESULT.getId() + "\n En Momentos se mostrara la ventana de Tiendas en Respuesta al Servidor... se Paciente");
            break;
        case "False":
            JOptionPane.showMessageDialog(null,"Error: Acesso Denegado, la contraseña es incorrecta");
            break;
        case "Fail":
            JOptionPane.showMessageDialog(null,"Error: Acesso Fallido, no Existe Usuario");
            break;
        default:
            break;
    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // R1 ::= error usuario 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R1",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // R1 ::= DI Registro Id Igual numero DI bool DI Registro DF 
            {
              StringBuilder RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
    RESULT = new StringBuilder();
    RESULT.append("\t $registro id = ");
    RESULT.append(val1);
    RESULT.append("$ ");
    RESULT.append(val2);
    RESULT.append(" $registro-$\n");
    if(val2.equals("True")){
        JOptionPane.showMessageDialog(null,"Registro Exitoso");
    }else{
        JOptionPane.showMessageDialog(null,"El Registro del Usuario " + val1 + " ha Fallado");
    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R1",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TE ::= DI Eliminacion Id Igual numero DI bool DI Eliminacion DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TM ::= DI Modificar Id Igual numero DI bool DI Modificar DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TM",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PE ::= DI Eliminacion Id Igual numero Sucursal Igual numero DI bool DI Eliminacion DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PM ::= DI Modificar Id Igual numero Sucursal Igual numero DI bool DI Modificar DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PM",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PR ::= DI Registro Id Igual numero Sucursal Igual numero DI bool DI Registro DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TCS ::= TE 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TCS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TCS ::= TM 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TCS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PCS ::= PE 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PCS ::= PM 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PCS ::= PR 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TINFOP ::= DI Telefono DI numero DI Telefono DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TINFOP ::= DI Direccion DI cadena DI Direccion DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TINFOP ::= DI Nombre DI cadena DI Nombre DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TINFOP ::= DI Propietario DI numero DI Propietario DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TINFOP ::= DI Codigo DI numero DI Codigo DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PINFOP ::= DI Sucursal DI numero DI Sucursal DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PINFOP ::= DI Tamano DI numero DI Tamano DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PINFOP ::= DI Color DI cadena DI Color DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PINFOP ::= DI Marca DI cadena DI Marca DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PINFOP ::= DI Cantidad DI numero DI Cantidad DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PINFOP ::= DI Nombre DI cadena DI Nombre DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PINFOP ::= DI Codigo DI numero DI Codigo DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TINFO ::= TINFOP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TINFO ::= TINFO TINFOP 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PINFO ::= PINFOP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PINFO ::= PINFO PINFOP 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TC ::= DI Tienda DI TINFO DI Tienda DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TC",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PC ::= DI Producto DI PINFO DI Producto DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PC",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POCP ::= DI COLUMNA DI numero DI COLUMNA DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POCP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POCP ::= DI FILA DI numero DI FILA DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POCP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // POC ::= POCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POC",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // POC ::= POC POCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POC",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ERRCP ::= DI DESC DI cadena DI DESC DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ERRCP ::= DI PO DI POC DI PO DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ERRCP ::= DI TIPO DI cadena DI TIPO DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ERRC ::= ERRCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRC",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ERRC ::= ERRC ERRCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRC",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= DI Lista DI TC DI Lista DF 
            {
              ArrayList<Object> RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= DI Lista DI PC DI Lista DF 
            {
              ArrayList<Object> RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDOP ::= LISTA 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDOP ::= DI ERR DI ERRC DI ERR DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOP ::= DI Producto DI PCS DI Producto DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDOP ::= DI usuario DI R1 DI usuario DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOP ::= DI Tienda DI TCS DI Tienda DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOP ::= DI usuario DI LOG DI usuario DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= CONTENIDOP 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= CONTENIDO CONTENIDOP 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= DI Reply DI CONTENIDO DI Reply DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

