
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 11 20:25:54 CST 2016
//----------------------------------------------------

package BackEnd.Analizadores;

import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.Log_in;
import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.Catalogo_Tiendas;
import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.Catalogo_Productos;
import static compi1.proyecto1_cliente.pkg201403775.Compi1Proyecto1_Cliente201403775.usuario;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import BackEnd.DOA.Objetos.Error;
import BackEnd.DOA.Objetos.Producto;
import BackEnd.DOA.Objetos.Tienda;
import BackEnd.DOA.Objetos.Acess;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 11 20:25:54 CST 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\010\000\002" +
    "\023\004\000\002\023\003\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\025\004\000\002\025\003" +
    "\000\002\026\011\000\002\026\011\000\002\031\004\000" +
    "\002\031\003\000\002\032\004\000\002\032\003\000\002" +
    "\017\011\000\002\006\011\000\002\020\004\000\002\020" +
    "\003\000\002\011\004\000\002\011\003\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\021\011\000\002" +
    "\012\011\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\012\011\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\017\000\002\015\017\000\002\016\017\000\002" +
    "\007\014\000\002\010\014\000\002\005\014\000\002\005" +
    "\004\000\002\027\004\000\002\027\003\000\002\030\011" +
    "\000\002\030\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\007\005\001\002\000\004\002\u0111\001" +
    "\002\000\004\012\006\001\002\000\004\007\007\001\002" +
    "\000\004\007\011\001\002\000\004\007\u010d\001\002\000" +
    "\014\017\017\020\016\021\013\022\015\023\014\001\002" +
    "\000\004\007\ufffe\001\002\000\004\007\340\001\002\000" +
    "\004\007\166\001\002\000\004\007\115\001\002\000\004" +
    "\007\052\001\002\000\004\007\020\001\002\000\004\007" +
    "\023\001\002\000\004\007\047\001\002\000\004\007\uffd3" +
    "\001\002\000\006\015\025\016\026\001\002\000\004\007" +
    "\uffd2\001\002\000\004\031\037\001\002\000\004\031\027" +
    "\001\002\000\004\011\030\001\002\000\004\004\031\001" +
    "\002\000\004\007\032\001\002\000\004\006\033\001\002" +
    "\000\004\007\034\001\002\000\004\016\035\001\002\000" +
    "\004\010\036\001\002\000\004\007\uffcd\001\002\000\004" +
    "\011\040\001\002\000\004\004\041\001\002\000\004\007" +
    "\042\001\002\000\004\006\043\001\002\000\004\007\044" +
    "\001\002\000\004\015\045\001\002\000\004\010\046\001" +
    "\002\000\004\007\uffce\001\002\000\004\017\050\001\002" +
    "\000\004\010\051\001\002\000\004\007\ufffc\001\002\000" +
    "\006\003\054\007\057\001\002\000\004\007\112\001\002" +
    "\000\004\020\110\001\002\000\004\007\105\001\002\000" +
    "\004\007\uffc9\001\002\000\010\013\062\014\061\031\060" +
    "\001\002\000\004\007\100\001\002\000\004\031\070\001" +
    "\002\000\004\007\063\001\002\000\004\006\064\001\002" +
    "\000\004\007\065\001\002\000\004\013\066\001\002\000" +
    "\004\010\067\001\002\000\004\007\uffc7\001\002\000\004" +
    "\011\071\001\002\000\004\004\072\001\002\000\004\007" +
    "\073\001\002\000\004\006\074\001\002\000\004\007\075" +
    "\001\002\000\004\014\076\001\002\000\004\010\077\001" +
    "\002\000\004\007\uffcc\001\002\000\004\004\101\001\002" +
    "\000\004\007\102\001\002\000\004\031\103\001\002\000" +
    "\004\010\104\001\002\000\004\007\uffc8\001\002\000\004" +
    "\020\106\001\002\000\004\010\107\001\002\000\004\007" +
    "\ufffb\001\002\000\004\007\uffcb\001\002\000\004\007\uffca" +
    "\001\002\000\010\013\062\020\113\031\060\001\002\000" +
    "\004\010\114\001\002\000\004\007\ufffd\001\002\000\004" +
    "\007\120\001\002\000\004\007\163\001\002\000\004\007" +
    "\ufff4\001\002\000\010\024\123\025\121\030\122\001\002" +
    "\000\004\007\136\001\002\000\004\007\131\001\002\000" +
    "\004\007\124\001\002\000\004\005\125\001\002\000\004" +
    "\007\126\001\002\000\004\024\127\001\002\000\004\010" +
    "\130\001\002\000\004\007\ufff3\001\002\000\004\005\132" +
    "\001\002\000\004\007\133\001\002\000\004\030\134\001" +
    "\002\000\004\010\135\001\002\000\004\007\ufff1\001\002" +
    "\000\004\007\141\001\002\000\004\007\157\001\002\000" +
    "\004\007\uffef\001\002\000\006\026\142\027\143\001\002" +
    "\000\004\007\151\001\002\000\004\007\144\001\002\000" +
    "\004\004\145\001\002\000\004\007\146\001\002\000\004" +
    "\027\147\001\002\000\004\010\150\001\002\000\004\007" +
    "\uffed\001\002\000\004\004\152\001\002\000\004\007\153" +
    "\001\002\000\004\026\154\001\002\000\004\010\155\001" +
    "\002\000\004\007\uffee\001\002\000\004\007\ufff0\001\002" +
    "\000\010\025\160\026\142\027\143\001\002\000\004\010" +
    "\161\001\002\000\004\007\ufff2\001\002\000\004\007\ufff5" +
    "\001\002\000\012\022\164\024\123\025\121\030\122\001" +
    "\002\000\004\010\165\001\002\000\004\007\ufff9\001\002" +
    "\000\004\007\172\001\002\000\004\007\335\001\002\000" +
    "\004\007\uffe9\001\002\000\004\007\330\001\002\000\010" +
    "\017\176\021\174\023\175\001\002\000\004\007\uffeb\001" +
    "\002\000\004\007\246\001\002\000\004\010\245\001\002" +
    "\000\004\007\177\001\002\000\004\007\202\001\002\000" +
    "\004\007\242\001\002\000\004\007\uffe3\001\002\000\014" +
    "\032\205\033\207\034\204\035\206\036\203\001\002\000" +
    "\004\007\234\001\002\000\004\007\227\001\002\000\004" +
    "\007\222\001\002\000\004\007\215\001\002\000\004\007" +
    "\210\001\002\000\004\005\211\001\002\000\004\007\212" +
    "\001\002\000\004\033\213\001\002\000\004\010\214\001" +
    "\002\000\004\007\uffd9\001\002\000\004\004\216\001\002" +
    "\000\004\007\217\001\002\000\004\035\220\001\002\000" +
    "\004\010\221\001\002\000\004\007\uffdb\001\002\000\004" +
    "\005\223\001\002\000\004\007\224\001\002\000\004\032" +
    "\225\001\002\000\004\010\226\001\002\000\004\007\uffd8" +
    "\001\002\000\004\004\230\001\002\000\004\007\231\001" +
    "\002\000\004\034\232\001\002\000\004\010\233\001\002" +
    "\000\004\007\uffd7\001\002\000\004\004\235\001\002\000" +
    "\004\007\236\001\002\000\004\036\237\001\002\000\004" +
    "\010\240\001\002\000\004\007\uffda\001\002\000\004\007" +
    "\uffe4\001\002\000\016\017\243\032\205\033\207\034\204" +
    "\035\206\036\203\001\002\000\004\010\244\001\002\000" +
    "\004\007\uffe7\001\002\000\004\007\ufff6\001\002\000\004" +
    "\007\250\001\002\000\004\007\uffe5\001\002\000\020\033" +
    "\262\035\261\037\260\040\255\041\263\042\257\043\254" +
    "\001\002\000\004\007\253\001\002\000\004\007\uffe6\001" +
    "\002\000\022\021\256\033\262\035\261\037\260\040\255" +
    "\041\263\042\257\043\254\001\002\000\004\007\323\001" +
    "\002\000\004\007\316\001\002\000\004\010\315\001\002" +
    "\000\004\007\310\001\002\000\004\007\303\001\002\000" +
    "\004\007\276\001\002\000\004\007\271\001\002\000\004" +
    "\007\264\001\002\000\004\005\265\001\002\000\004\007" +
    "\266\001\002\000\004\041\267\001\002\000\004\010\270" +
    "\001\002\000\004\007\uffde\001\002\000\004\005\272\001" +
    "\002\000\004\007\273\001\002\000\004\033\274\001\002" +
    "\000\004\010\275\001\002\000\004\007\uffe1\001\002\000" +
    "\004\004\277\001\002\000\004\007\300\001\002\000\004" +
    "\035\301\001\002\000\004\010\302\001\002\000\004\007" +
    "\uffe2\001\002\000\004\004\304\001\002\000\004\007\305" +
    "\001\002\000\004\037\306\001\002\000\004\010\307\001" +
    "\002\000\004\007\uffe0\001\002\000\004\004\311\001\002" +
    "\000\004\007\312\001\002\000\004\042\313\001\002\000" +
    "\004\010\314\001\002\000\004\007\uffdd\001\002\000\004" +
    "\007\uffe8\001\002\000\004\005\317\001\002\000\004\007" +
    "\320\001\002\000\004\040\321\001\002\000\004\010\322" +
    "\001\002\000\004\007\uffdf\001\002\000\004\004\324\001" +
    "\002\000\004\007\325\001\002\000\004\043\326\001\002" +
    "\000\004\010\327\001\002\000\004\007\uffdc\001\002\000" +
    "\006\021\174\023\332\001\002\000\004\007\uffec\001\002" +
    "\000\004\010\333\001\002\000\004\007\ufff8\001\002\000" +
    "\004\007\uffea\001\002\000\006\017\176\023\336\001\002" +
    "\000\004\010\337\001\002\000\004\007\ufff7\001\002\000" +
    "\004\007\345\001\002\000\004\007\uffd6\001\002\000\004" +
    "\007\uffd4\001\002\000\004\007\uffd5\001\002\000\004\007" +
    "\u010a\001\002\000\010\014\347\015\346\016\350\001\002" +
    "\000\004\031\377\001\002\000\004\031\364\001\002\000" +
    "\004\031\351\001\002\000\004\011\352\001\002\000\004" +
    "\004\353\001\002\000\004\043\354\001\002\000\004\011" +
    "\355\001\002\000\004\004\356\001\002\000\004\007\357" +
    "\001\002\000\004\006\360\001\002\000\004\007\361\001" +
    "\002\000\004\016\362\001\002\000\004\010\363\001\002" +
    "\000\004\007\uffcf\001\002\000\004\011\365\001\002\000" +
    "\004\004\366\001\002\000\004\043\367\001\002\000\004" +
    "\011\370\001\002\000\004\004\371\001\002\000\004\007" +
    "\372\001\002\000\004\006\373\001\002\000\004\007\374" +
    "\001\002\000\004\014\375\001\002\000\004\010\376\001" +
    "\002\000\004\007\uffd1\001\002\000\004\011\u0100\001\002" +
    "\000\004\004\u0101\001\002\000\004\043\u0102\001\002\000" +
    "\004\011\u0103\001\002\000\004\004\u0104\001\002\000\004" +
    "\007\u0105\001\002\000\004\006\u0106\001\002\000\004\007" +
    "\u0107\001\002\000\004\015\u0108\001\002\000\004\010\u0109" +
    "\001\002\000\004\007\uffd0\001\002\000\004\021\u010b\001" +
    "\002\000\004\010\u010c\001\002\000\004\007\ufffa\001\002" +
    "\000\016\012\u010f\017\017\020\016\021\013\022\015\023" +
    "\014\001\002\000\004\007\uffff\001\002\000\004\010\u0110" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\007\004\011" +
    "\001\001\000\004\004\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\021\010\023\013\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\054\027\052\030\055\001\001" +
    "\000\004\030\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\115\024" +
    "\116\001\001\000\004\024\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\136\026\137\001\001\000" +
    "\004\026\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\167\017\172\031\170\032\166\001" +
    "\001\000\004\006\333\001\001\000\002\001\001\000\004" +
    "\017\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\177\012\200\001\001\000\004\012\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\250\021\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\340\015" +
    "\342\016\341\022\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
		System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



		

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DATALOGP ::= DI Access DI bool DI Access DF 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Acess();
                RESULT.setValor(val);
                RESULT.concatenar("\t $access$ ");
                RESULT.concatenar(val);
                RESULT.concatenar(" $access-$\n");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DATALOGP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DATALOGP ::= DI Id DI numero DI Id DF 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Acess();
                RESULT.setId(val);
                RESULT.concatenar("\t $id$ ");
                RESULT.concatenar(val);
                RESULT.concatenar(" $id-$\n");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DATALOGP",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOG ::= DATALOGP 
            {
              Acess RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Acess val = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = val; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOG ::= LOG DATALOGP 
            {
              Acess RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Acess val1 = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Acess val2 = (Acess)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = new Acess();
                if(val1.getId()!=null){
                    RESULT.setId(val1.getId());
                    RESULT.setValor(val2.getValor());
                    RESULT.concatenar(val1.getreply());
                    RESULT.concatenar(val2.getreply());
                }else{
                    RESULT.setId(val2.getId());
                    RESULT.setValor(val1.getValor());
                    RESULT.concatenar(val2.getreply());
                    RESULT.concatenar(val1.getreply());
                }
                switch (RESULT.getValor()) {
                    case "True":
                        usuario.setId(Integer.parseInt(RESULT.getId()));
                        Catalogo_Tiendas.get_tiendas();
                        Log_in.setVisible(false);
                        JOptionPane.showMessageDialog(null,"Bienvenido usuario " + RESULT.getId() + "\n En Momentos se mostrara la ventana de Tiendas en Respuesta al Servidor... se Paciente");
                        break;
                    case "False":
                        JOptionPane.showMessageDialog(null,"Error: Acesso Denegado, la contraseña es incorrecta");
                        break;
                    case "Fail":
                        JOptionPane.showMessageDialog(null,"Error: Acesso Fallido, no Existe Usuario");
                        break;
                    default:
                        break;
                }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // R1 ::= error usuario 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R1",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // R1 ::= DI Registro Id Igual numero DI bool DI Registro DF 
            {
              StringBuilder RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new StringBuilder();
                RESULT.append("\t $registro id = ");
                RESULT.append(val1);
                RESULT.append("$ ");
                RESULT.append(val2);
                RESULT.append(" $registro-$\n");
                if(val2.equals("True")){
                    JOptionPane.showMessageDialog(null,"Registro Exitoso");
                }else{
                    JOptionPane.showMessageDialog(null,"El Registro del Usuario " + val1 + " ha Fallado");
                }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R1",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TE ::= DI Eliminacion Id Igual numero DI bool DI Eliminacion DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TE",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TM ::= DI Modificar Id Igual numero DI bool DI Modificar DF 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TM",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PE ::= DI Eliminacion Id Igual numero Sucursal Igual numero DI bool DI Eliminacion DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PM ::= DI Modificar Id Igual numero Sucursal Igual numero DI bool DI Modificar DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PM",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PR ::= DI Registro Id Igual numero Sucursal Igual numero DI bool DI Registro DF 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TCS ::= TE 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TCS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TCS ::= TM 
            {
              Tienda RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TCS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PCS ::= PE 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PCS ::= PM 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PCS ::= PR 
            {
              Producto RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCS",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TINFOP ::= DI Telefono DI numero DI Telefono DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setTelefono(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TINFOP ::= DI Direccion DI cadena DI Direccion DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setDirreccion(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TINFOP ::= DI Nombre DI cadena DI Nombre DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setNombre(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TINFOP ::= DI Propietario DI numero DI Propietario DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setPropietario(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TINFOP ::= DI Codigo DI numero DI Codigo DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Tienda();
                RESULT.setCodigo(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFOP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PINFOP ::= DI Sucursal DI numero DI Sucursal DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setSucursal(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PINFOP ::= DI Tamano DI numero DI Tamano DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setTamaño(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PINFOP ::= DI Color DI cadena DI Color DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setColor(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PINFOP ::= DI Marca DI cadena DI Marca DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setMarca(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PINFOP ::= DI Cantidad DI numero DI Cantidad DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setCantidad(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PINFOP ::= DI Nombre DI cadena DI Nombre DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setNombrre(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PINFOP ::= DI Codigo DI numero DI Codigo DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = new Producto();
                RESULT.setId(Integer.parseInt(val));

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFOP",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TINFO ::= TINFOP 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TINFO ::= TINFO TINFOP 
            {
              Tienda RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
				
                RESULT = val1;
                if(val2.getCodigo()!=0 && RESULT.getCodigo()==0){
                    RESULT.setCodigo(val2.getCodigo());
                }else if(!val2.getNombre().equals("vacio") && RESULT.getNombre().equals("vacio")){
                    RESULT.setNombre(val2.getNombre());
                }else if(val2.getPropietario()!=0 && RESULT.getPropietario()==0){
                    RESULT.setPropietario(val2.getPropietario());
                }else if(!val2.getDirreccion().equals("vacio") && RESULT.getDirreccion().equals("vacio")){
                    RESULT.setDirreccion(val2.getDirreccion());
                }else if(val2.getTelefono()!=0 && RESULT.getTelefono()==0){
                    RESULT.setTelefono(val2.getTelefono());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TINFO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PINFO ::= PINFOP 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PINFO ::= PINFO PINFOP 
            {
              Producto RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Producto val1 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = val1;

                if(val2.getId()!=0 && RESULT.getId()==0){
                    RESULT.setId(val2.getId());
                }else if(!val2.getNombrre().equals("vacio") && RESULT.getNombrre().equals("vacio")){
                    RESULT.setNombrre(val2.getNombrre());
                }else if(val2.getCantidad()!=0 && RESULT.getCantidad()==0){
                    RESULT.setCantidad(val2.getCantidad());
                }else if(!val2.getMarca().equals("vacio") && RESULT.getMarca().equals("vacio")){
                    RESULT.setMarca(val2.getMarca());
                }else if(!val2.getColor().equals("vacio") && RESULT.getColor().equals("vacio")){
                    RESULT.setColor(val2.getColor());
                }else if(val2.getTamaño()!=0 && RESULT.getTamaño()==0){
                    RESULT.setTamaño(val2.getTamaño());
                }else if(!val2.getImg().equals("vacio") && RESULT.getImg().equals("vacio")){
                    RESULT.setImg(val2.getImg());
                }else if(val2.getSucursal()!=0 && RESULT.getSucursal()==0){
                    RESULT.setSucursal(val2.getSucursal());
                }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PINFO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TCP ::= DI Tienda DI TINFO DI Tienda DF 
            {
              Tienda RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Tienda val = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TCP",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PCP ::= DI Producto DI PINFO DI Producto DF 
            {
              Producto RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                RESULT = val;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PCP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TC ::= TCP 
            {
              ArrayList<Tienda> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Tienda val1 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = new ArrayList();
                RESULT.add(val1);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TC",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TC ::= TC TCP 
            {
              ArrayList<Tienda> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		ArrayList<Tienda> val1 = (ArrayList<Tienda>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Tienda val2 = (Tienda)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = val1;
                RESULT.add(val2);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TC",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PC ::= PCP 
            {
              ArrayList<Producto> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Producto val = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = new ArrayList();
                RESULT.add(val);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PC",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PC ::= PC PCP 
            {
              ArrayList<Producto> RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		ArrayList<Producto> val1 = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Producto val2 = (Producto)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT = val1;
                RESULT.add(val2);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PC",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POCP ::= DI COLUMNA DI numero DI COLUMNA DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POCP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POCP ::= DI FILA DI numero DI FILA DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POCP",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // POC ::= POCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POC",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // POC ::= POC POCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("POC",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ERRCP ::= DI DESC DI cadena DI DESC DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ERRCP ::= DI PO DI POC DI PO DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ERRCP ::= DI TIPO DI cadena DI TIPO DF 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRCP",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ERRC ::= ERRCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRC",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ERRC ::= ERRC ERRCP 
            {
              Error RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERRC",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDOP ::= DI Lista DI DI Lista DF 
            {
              StringBuilder RESULT =null;
		
              if(Catalogo_Tiendas.isVisible()){
                  Catalogo_Tiendas.setVisible(false);
                  Catalogo_Productos.setVisible(true);
              }else{
                  Catalogo_Tiendas.setVisible(true);
              }
              
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDOP ::= DI Lista DI TC DI Lista DF 
            {
              StringBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		ArrayList<Tienda> val = (ArrayList<Tienda>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		
                StringBuilder RESULT2 = new StringBuilder();
                RESULT2.append("\t$Lista$\n");
                val.stream().forEach((Tienda t)->{
                    Catalogo_Tiendas.ingresar_tienda(t);
                    RESULT2.append("$tienda$\n");
                    RESULT2.append("$codigo$");
                    RESULT2.append(t.getCodigo());
                    RESULT2.append("$codigo-$\n");
                    RESULT2.append("$propietario$");
                    RESULT2.append(t.getPropietario());
                    RESULT2.append("$propietario-$\n");
                    RESULT2.append("$nombre$");
                    RESULT2.append("\"");
                    RESULT2.append(t.getNombre());
                    RESULT2.append("\"");
                    RESULT2.append("$nombre-$\n");
                    RESULT2.append("$direccion$");
                    RESULT2.append("\"");
                    RESULT2.append(t.getDirreccion());
                    RESULT2.append("\"");
                    RESULT2.append("$direccion-$\n");
                    RESULT2.append("$telefono$");
                    RESULT2.append(t.getTelefono());
                    RESULT2.append("$telefono-$\n");
                    RESULT2.append("$tienda-$\n");
                });
                RESULT2.append("\t$Lista-$\n");
                RESULT = RESULT2;
                
                Catalogo_Tiendas.cargar_tiendas();
                Catalogo_Tiendas.setVisible(true);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDOP ::= DI Lista DI PC DI Lista DF 
            {
              StringBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		ArrayList<Producto> val = (ArrayList<Producto>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

                StringBuilder RESULT2 = new StringBuilder();
                RESULT2.append("\t$Lista$\n");
                val.stream().forEach((Producto p)->{
                    Catalogo_Productos.agregar_Producto(p);
                        RESULT2.append("\t\t$producto$\n");
                        RESULT2.append("\t\t\t$código$");
                        RESULT2.append(p.getId());
                        RESULT2.append("$código-$\n");
                        RESULT2.append("\t\t\t$nombre$");
                        RESULT2.append("\"");
                        RESULT2.append(p.getNombrre());
                        RESULT2.append("\"");
                        RESULT2.append("$nombre-$\n");
                        RESULT2.append("\t\t\t$cantidad$");
                        RESULT2.append(p.getCantidad());
                        RESULT2.append("$cantidad-$\n");
                        RESULT2.append("\t\t\t$marca$");
                        RESULT2.append("\"");
                        RESULT2.append(p.getMarca());
                        RESULT2.append("\"");
                        RESULT2.append("$marca-$\n");
                        RESULT2.append("\t\t\t$color$");
                        RESULT2.append("\"");
                        RESULT2.append(p.getColor());
                        RESULT2.append("\"");
                        RESULT2.append("$color-$\n");
                        RESULT2.append("\t\t\t$tamaño$");
                        RESULT2.append(p.getTamaño());
                        RESULT2.append("$tamaño-$\n");
                        RESULT2.append("\t\t\t$sucursal$");
                        RESULT2.append(p.getSucursal());
                        RESULT2.append("$sucursal-$\n");
                        RESULT2.append("\t\t$producto-$\n");
                });
                RESULT2.append("\t$Lista-$\n");
                RESULT = RESULT2;
                
                Catalogo_Productos.carga_productos();
                Catalogo_Productos.setVisible(true);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDOP ::= DI ERR DI ERRC DI ERR DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDOP ::= DI Producto DI PCS DI Producto DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDOP ::= DI usuario DI R1 DI usuario DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOP ::= DI Tienda DI TCS DI Tienda DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOP ::= DI usuario DI LOG DI usuario DF 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOP",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= CONTENIDOP 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= CONTENIDO CONTENIDOP 
            {
              StringBuilder RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIA ::= DI Reply DI CONTENIDO DI Reply DF 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

